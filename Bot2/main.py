import telebot
from telebot import types
import requests
import json
from datetime import datetime
import time
import threading
import logging
import math
from math import radians, sin, cos, sqrt, atan2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7285252427:AAEbH8M65QdLdeogC0kQ602b7siHToORSvs')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
NBRB_API_URL = 'https://api.nbrb.by/exrates/rates?periodicity=0'  # API –ù–ë–†–ë –¥–ª—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
BINANCE_API_URL = 'https://api.binance.com/api/v3/ticker/price'  # API Binance –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
BINANCE_CONVERT_URL = 'https://api.binance.com/api/v3/ticker/price?symbol='  # –î–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
YANDEX_MAPS_URL = 'https://yandex.com/maps/?rtext='  # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
YANDEX_SEARCH_URL = 'https://yandex.com/maps/?text='  # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —É–ª–∏—Ü–µ

# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
FIAT_CURRENCIES = ['USD', 'EUR', 'CNY']  # –í–∞–ª—é—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞ –ù–ë–†–ë
CRYPTO_CURRENCIES = ['BTC', 'ETH', 'BNB', 'XRP', 'ADA']  # –°–ø–∏—Å–æ–∫ –∏–∑ 5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
subscriptions = {}
last_fiat_rates = {}
last_crypto_rates = {}
last_fiat_update_time = 0
last_crypto_update_time = 0
CACHE_DURATION = 3600  # 1 —á–∞—Å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (Haversine)
def haversine_distance(lat1, lon1, lat2, lon2):
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    distance = R * c
    return distance

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–ª–∏—Ü—ã –∏–∑ –∞–¥—Ä–µ—Å–∞
def extract_street(address):
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –±–µ—Ä–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π –∏ –¥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    parts = address.split(', ')
    if len(parts) > 1:
        street_part = parts[1].split(' ')[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —É–ª–∏—Ü—É
        return street_part
    return address.replace('–≥. –ú–∏–Ω—Å–∫, ', '').split(' ')[0]  # –ï—Å–ª–∏ –∑–∞–ø—è—Ç–æ–π –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç —Å –ù–ë–†–ë
def get_fiat_rates():
    global last_fiat_rates, last_fiat_update_time
    current_time = time.time()

    if last_fiat_rates and (current_time - last_fiat_update_time) < CACHE_DURATION:
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
        return last_fiat_rates

    try:
        response = requests.get(NBRB_API_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        fiat_rates = {}
        for item in data:
            if item['Cur_Abbreviation'] in FIAT_CURRENCIES:
                fiat_rates[item['Cur_Abbreviation']] = {
                    'rate': item['Cur_OfficialRate'],
                    'scale': item['Cur_Scale']
                }
        last_fiat_rates = fiat_rates
        last_fiat_update_time = current_time
        logging.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
        return fiat_rates
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –ù–ë–†–ë: {e}")
        return last_fiat_rates if last_fiat_rates else {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å Binance
def get_crypto_rates():
    global last_crypto_rates, last_crypto_update_time
    current_time = time.time()

    if last_crypto_rates and (current_time - last_crypto_update_time) < CACHE_DURATION:
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        return last_crypto_rates

    try:
        response = requests.get(BINANCE_API_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        crypto_rates = {}
        for crypto in CRYPTO_CURRENCIES:
            symbol = f"{crypto}USDT"
            for item in data:
                if item['symbol'] == symbol:
                    usd_rate = float(item['price'])
                    fiat_rates = get_fiat_rates()
                    usd_to_byn = fiat_rates.get('USD', {}).get('rate', None)
                    scale_usd = fiat_rates.get('USD', {}).get('scale', 1)
                    if usd_to_byn:
                        byn_rate = usd_rate * (usd_to_byn / scale_usd)
                    else:
                        byn_rate = None
                    crypto_rates[crypto] = {
                        'USD': usd_rate,
                        'BYN': byn_rate
                    }
                    break
        last_crypto_rates = crypto_rates
        last_crypto_update_time = current_time
        logging.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        return crypto_rates
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return last_crypto_rates if last_crypto_rates else {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ Binance
def convert_crypto(amount, from_currency, to_currency):
    try:
        if from_currency in FIAT_CURRENCIES or to_currency in FIAT_CURRENCIES:
            crypto = from_currency if from_currency in CRYPTO_CURRENCIES else to_currency
            fiat = to_currency if to_currency in FIAT_CURRENCIES else from_currency
            crypto_rates = get_crypto_rates()
            if crypto not in crypto_rates:
                return None
            if fiat == 'USD':
                rate = crypto_rates[crypto]['USD']
            else:
                rate = crypto_rates[crypto]['BYN']
                if rate is None:
                    return None
            if from_currency in CRYPTO_CURRENCIES:
                return amount * rate
            else:
                return amount / rate if rate != 0 else None
        else:
            symbol = f"{from_currency}{to_currency}"
            response = requests.get(f"{BINANCE_CONVERT_URL}{symbol}", timeout=10)
            if response.status_code == 200:
                data = response.json()
                rate = float(data['price'])
                return amount * rate
            symbol1 = f"{from_currency}USDT"
            symbol2 = f"{to_currency}USDT"
            response1 = requests.get(f"{BINANCE_CONVERT_URL}{symbol1}", timeout=10)
            response2 = requests.get(f"{BINANCE_CONVERT_URL}{symbol2}", timeout=10)
            if response1.status_code == 200 and response2.status_code == 200:
                rate1 = float(response1.json()['price'])
                rate2 = float(response2.json()['price'])
                if rate2 != 0:
                    return amount * (rate1 / rate2)
            return None
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return None
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ª—É—á—à–∏—Ö –∫—É—Ä—Å–æ–≤ –∏–∑ JSON
def get_best_rates():
    try:
        with open('bank_rates.json', 'r', encoding='utf-8') as f:
            rates = json.load(f)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ù–ë–†–ë
        fiat_rates = get_fiat_rates()
        usd_nbrb = fiat_rates.get('USD', {}).get('rate', 0.0)
        eur_nbrb = fiat_rates.get('EUR', {}).get('rate', 0.0)

        for rate in rates:
            rate['USD']['nbrb'] = usd_nbrb
            rate['EUR']['nbrb'] = eur_nbrb

        logging.info("–ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ bank_rates.json")
        return rates
    except FileNotFoundError:
        logging.error("–§–∞–π–ª bank_rates.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ bank_rates.json: {e}")
        return []

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚Çø –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    btn2 = types.KeyboardButton("üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç")
    btn3 = types.KeyboardButton("üè¶ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã")
    markup.add(btn1, btn2, btn3)
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è "–õ—É—á—à–∏–µ –∫—É—Ä—Å—ã"
def create_best_rates_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
    btn2 = types.KeyboardButton("–¢–æ–ø-3 –∫—É—Ä—Å–æ–≤")
    btn3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3)
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
def create_sort_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ USD (–ü–æ–∫—É–ø–∫–∞)")
    btn2 = types.KeyboardButton("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ USD (–ü—Ä–æ–¥–∞–∂–∞)")
    btn3 = types.KeyboardButton("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ EUR (–ü–æ–∫—É–ø–∫–∞)")
    btn4 = types.KeyboardButton("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ EUR (–ü—Ä–æ–¥–∞–∂–∞)")
    btn5 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ø-3
def create_top_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("1-–µ –º–µ—Å—Ç–æ")
    btn2 = types.KeyboardButton("2-–µ –º–µ—Å—Ç–æ")
    btn3 = types.KeyboardButton("3-–µ –º–µ—Å—Ç–æ")
    btn4 = types.KeyboardButton("–ë–ª–∏–∂–∞–π—à–∏–µ (3 –∫–º)")
    btn5 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message,
                 "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π.",
                 reply_markup=create_main_menu())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—É—á—à–∏—Ö –∫—É—Ä—Å–æ–≤
@bot.message_handler(func=lambda message: message.text == "üè¶ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã")
def check_best_rates(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_best_rates_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–æ–¥–º–µ–Ω—é "–õ—É—á—à–∏–µ –∫—É—Ä—Å—ã"
@bot.message_handler(func=lambda message: message.text in ["–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", "–¢–æ–ø-3 –∫—É—Ä—Å–æ–≤", "–ù–∞–∑–∞–¥"])
def handle_best_rates_action(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_main_menu())
        return
    elif message.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å":
        markup = create_sort_menu()
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)
    elif message.text == "–¢–æ–ø-3 –∫—É—Ä—Å–æ–≤":
        best_rates = get_best_rates()
        if not best_rates:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bank_rates.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=create_main_menu())
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∫—É–ø–∫–µ USD
        best_rates.sort(key=lambda x: x['USD']['buy'], reverse=True)
        top_3 = best_rates[:3]

        response = "üè¶ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã –≤ –ú–∏–Ω—Å–∫–µ (–ø–æ –¥–∞–Ω–Ω—ã–º Myfin.by):\n\n"
        for i, rate in enumerate(top_3, 1):
            response += f"{i}-–µ –º–µ—Å—Ç–æ: üè¶ {rate['bank']}\n"
            response += f"üíµ USD: –ü–æ–∫—É–ø–∫–∞: {rate['USD']['buy']:.2f}, –ü—Ä–æ–¥–∞–∂–∞: {rate['USD']['sell']:.2f}, –ù–ë–†–ë: {rate['USD']['nbrb']:.2f}\n"
            response += f"üí∂ EUR: –ü–æ–∫—É–ø–∫–∞: {rate['EUR']['buy']:.2f}, –ü—Ä–æ–¥–∞–∂–∞: {rate['EUR']['sell']:.2f}, –ù–ë–†–ë: {rate['EUR']['nbrb']:.2f}\n"
            response += "üìç –û—Ç–¥–µ–ª–µ–Ω–∏—è:\n"
            for branch in rate.get('branches', []):
                response += f"- {branch['address']}\n"
            response += "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            for i in range(0, len(response), 4000):
                bot.reply_to(message, response[i:i+4000], reply_markup=create_top_menu() if i == 0 else None)
        else:
            bot.reply_to(message, response, reply_markup=create_top_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–≤—Å–µ –±–∞–Ω–∫–∏)
@bot.message_handler(func=lambda message: message.text in [
    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ USD (–ü–æ–∫—É–ø–∫–∞)", "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ USD (–ü—Ä–æ–¥–∞–∂–∞)",
    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ EUR (–ü–æ–∫—É–ø–∫–∞)", "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ EUR (–ü—Ä–æ–¥–∞–∂–∞)", "–ù–∞–∑–∞–¥"
])
def handle_best_rates_sort(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.", reply_markup=create_best_rates_menu())
        return

    best_rates = get_best_rates()
    if not best_rates:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bank_rates.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=create_main_menu())
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫—É—Ä—Å–∞–º
    if message.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ USD (–ü–æ–∫—É–ø–∫–∞)":
        best_rates.sort(key=lambda x: x['USD']['buy'], reverse=True)
    elif message.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ USD (–ü—Ä–æ–¥–∞–∂–∞)":
        best_rates.sort(key=lambda x: x['USD']['sell'], reverse=True)
    elif message.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ EUR (–ü–æ–∫—É–ø–∫–∞)":
        best_rates.sort(key=lambda x: x['EUR']['buy'], reverse=True)
    elif message.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ EUR (–ü—Ä–æ–¥–∞–∂–∞)":
        best_rates.sort(key=lambda x: x['EUR']['sell'], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üè¶ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã –≤ –ú–∏–Ω—Å–∫–µ (–ø–æ –¥–∞–Ω–Ω—ã–º Myfin.by):\n\n"
    for rate in best_rates:
        new_response = f"üè¶ –ë–∞–Ω–∫: {rate['bank']}\n"
        new_response += f"üíµ USD: –ü–æ–∫—É–ø–∫–∞: {rate['USD']['buy']:.2f}, –ü—Ä–æ–¥–∞–∂–∞: {rate['USD']['sell']:.2f}, –ù–ë–†–ë: {rate['USD']['nbrb']:.2f}\n"
        new_response += f"üí∂ EUR: –ü–æ–∫—É–ø–∫–∞: {rate['EUR']['buy']:.2f}, –ü—Ä–æ–¥–∞–∂–∞: {rate['EUR']['sell']:.2f}, –ù–ë–†–ë: {rate['EUR']['nbrb']:.2f}\n"
        new_response += "üìç –û—Ç–¥–µ–ª–µ–Ω–∏—è:\n"
        for branch in rate.get('branches', []):
            new_response += f"- {branch['address']}\n"
        new_response += "\n"

        if len(response) + len(new_response) > 4000:
            bot.reply_to(message, response, reply_markup=create_best_rates_menu())
            response = new_response
        else:
            response += new_response

    if response.strip():
        bot.reply_to(message, response, reply_markup=create_best_rates_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø-3 –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏—Ö
@bot.message_handler(func=lambda message: message.text in ["1-–µ –º–µ—Å—Ç–æ", "2-–µ –º–µ—Å—Ç–æ", "3-–µ –º–µ—Å—Ç–æ", "–ë–ª–∏–∂–∞–π—à–∏–µ (3 –∫–º)", "–ù–∞–∑–∞–¥"])
def handle_top_selection(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.", reply_markup=create_best_rates_menu())
        return

    best_rates = get_best_rates()
    if not best_rates:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ —Ñ–∞–π–ª–∞.", reply_markup=create_main_menu())
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∫—É–ø–∫–µ USD
    best_rates.sort(key=lambda x: x['USD']['buy'], reverse=True)
    top_3 = best_rates[:3]

    if message.text == "–ë–ª–∏–∂–∞–π—à–∏–µ (3 –∫–º)":
        # –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        btn_back = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn, btn_back)
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: process_location(m, top_3))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ 1-–µ, 2-–µ –∏–ª–∏ 3-–µ –º–µ—Å—Ç–æ
    place = {"1-–µ –º–µ—Å—Ç–æ": 0, "2-–µ –º–µ—Å—Ç–æ": 1, "3-–µ –º–µ—Å—Ç–æ": 2}[message.text]
    bank = top_3[place]

    bank_name = bank['bank']
    branches = bank.get('branches', [])
    response = f"üè¶ {bank_name}\n"
    response += f"üíµ USD: –ü–æ–∫—É–ø–∫–∞: {bank['USD']['buy']:.2f}, –ü—Ä–æ–¥–∞–∂–∞: {bank['USD']['sell']:.2f}, –ù–ë–†–ë: {bank['USD']['nbrb']:.2f}\n"
    response += f"üí∂ EUR: –ü–æ–∫—É–ø–∫–∞: {bank['EUR']['buy']:.2f}, –ü—Ä–æ–¥–∞–∂–∞: {bank['EUR']['sell']:.2f}, –ù–ë–†–ë: {bank['EUR']['nbrb']:.2f}\n\n"
    response += "üìç –û—Ç–¥–µ–ª–µ–Ω–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç—ã:\n"

    for branch in branches:
        lat, lon = branch.get('coords', (0, 0))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º (0, 0) –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if lat == 0 and lon == 0:
            street = extract_street(branch['address'])
            yandex_search_link = f"{YANDEX_SEARCH_URL}{street.replace(' ', '+')}"
            response += f"- {branch['address']} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–∏—Å–∫ –ø–æ —É–ª–∏—Ü–µ)\n"
            response += f"  1. –ü–æ–∏—Å–∫: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_search_link})\n"
        else:
            yandex_link = f"{YANDEX_MAPS_URL}{lat},{lon}~53.9025,27.5616"
            response += f"- {branch['address']}\n"
            response += f"  1. –ü–µ—à–∫–æ–º: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_link}&mode=walking)\n"
            response += f"  2. –ù–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_link}&mode=transit)\n"
            response += f"  3. –ù–∞ –º–∞—à–∏–Ω–µ: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_link}&mode=driving)\n\n"

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4000:
        for i in range(0, len(response), 4000):
            bot.reply_to(message, response[i:i+4000], reply_markup=create_best_rates_menu() if i == 0 else None)
    else:
        bot.reply_to(message, response, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=create_best_rates_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def process_location(message, top_3):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.", reply_markup=create_best_rates_menu())
        return

    if message.location:
        user_lat = message.location.latitude
        user_lon = message.location.longitude

        # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –∏–∑ —Ç–æ–ø-3 –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º
        response = "üè¶ –ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∏–∑ —Ç–æ–ø-3 –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º:\n\n"
        has_nearby = False
        for bank in top_3:
            bank_name = bank['bank']
            branches = bank.get('branches', [])
            for branch in branches:
                lat, lon = branch.get('coords', (user_lat, user_lon))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                distance = haversine_distance(user_lat, user_lon, lat, lon)
                if distance <= 3:  # –†–∞–¥–∏—É—Å 3 –∫–º
                    has_nearby = True
                    response += f"üè¶ {bank_name} - {branch['address']}\n"
                    response += f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n"
                    if lat == user_lat and lon == user_lon:  # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                        street = extract_street(branch['address'])
                        yandex_search_link = f"{YANDEX_SEARCH_URL}{street.replace(' ', '+')}"
                        response += f"  1. –ü–æ–∏—Å–∫ –ø–æ —É–ª–∏—Ü–µ: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_search_link})\n"
                    else:
                        yandex_link = f"{YANDEX_MAPS_URL}{lat},{lon}~{user_lat},{user_lon}"
                        response += f"  1. –ü–µ—à–∫–æ–º: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_link}&mode=walking)\n"
                        response += f"  2. –ù–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_link}&mode=transit)\n"
                        response += f"  3. –ù–∞ –º–∞—à–∏–Ω–µ: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({yandex_link}&mode=driving)\n\n"

        if not has_nearby:
            response = "–ù–µ—Ç –æ—Ç–¥–µ–ª–µ–Ω–∏–π –∏–∑ —Ç–æ–ø-3 –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            for i in range(0, len(response), 4000):
                bot.reply_to(message, response[i:i+4000], reply_markup=create_best_rates_menu() if i == 0 else None)
        else:
            bot.reply_to(message, response, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=create_best_rates_menu())
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=create_best_rates_menu())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
@bot.message_handler(func=lambda message: message.text == "‚Çø –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
def check_crypto_rates(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã")
    btn2 = types.KeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
    btn3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
@bot.message_handler(func=lambda message: message.text in ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã", "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", "–ù–∞–∑–∞–¥"])
def handle_crypto_action(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_main_menu())
        return
    elif message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã":
        crypto_rates = get_crypto_rates()
        if not crypto_rates:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu())
            return
        response = "–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
        for crypto in CRYPTO_CURRENCIES:
            if crypto in crypto_rates:
                usd_rate = crypto_rates[crypto]['USD']
                byn_rate = crypto_rates[crypto]['BYN']
                response += f"{crypto}:\n"
                response += f"  USD: {usd_rate:,.2f}\n"
                response += f"  BYN: {byn_rate:,.2f}\n" if byn_rate is not None else "  BYN: –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                response += "\n"
            else:
                response += f"{crypto}: –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
        bot.reply_to(message, response, reply_markup=create_main_menu())
    elif message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = [types.KeyboardButton(c) for c in CRYPTO_CURRENCIES + ['USD', 'BYN']]
        markup.add(*buttons)
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)
        bot.register_next_step_handler(message, select_from_currency)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–æ–≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
@bot.message_handler(func=lambda message: message.text == "üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç")
def check_fiat_rates(message):
    fiat_rates = get_fiat_rates()
    if not fiat_rates:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu())
        return
    response = "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ BYN (–ø–æ –¥–∞–Ω–Ω—ã–º –ù–ë–†–ë):\n\n"
    for currency in FIAT_CURRENCIES:
        if currency in fiat_rates:
            rate = fiat_rates[currency]['rate']
            scale = fiat_rates[currency]['scale']
            response += f"{scale} {currency} = {rate:.2f} BYN\n"
        else:
            response += f"{currency}: –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
    bot.reply_to(message, response, reply_markup=create_main_menu())

# –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
def select_from_currency(message):
    from_currency = message.text
    if from_currency not in (CRYPTO_CURRENCIES + ['USD', 'BYN']):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞!", reply_markup=create_main_menu())
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = [types.KeyboardButton(c) for c in CRYPTO_CURRENCIES + ['USD', 'BYN']]
    markup.add(*buttons)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: select_to_currency(m, from_currency))

def select_to_currency(message, from_currency):
    to_currency = message.text
    if to_currency not in (CRYPTO_CURRENCIES + ['USD', 'BYN']):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞!", reply_markup=create_main_menu())
        return
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    bot.register_next_step_handler(message, lambda m: process_conversion(m, from_currency, to_currency))

def process_conversion(message, from_currency, to_currency):
    try:
        amount = float(message.text)
        result = convert_crypto(amount, from_currency, to_currency)
        if result:
            bot.reply_to(message, f"{amount} {from_currency} = {result:.2f} {to_currency}",
                         reply_markup=create_main_menu())
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu())
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=create_main_menu())

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)